{"version":3,"sources":["actions/index.js","providers/RedditViewerProvider.js","components/topcontrolbar.js","components/gallery.js","components/bottomcontrolbar.js","containers/App.js","containers/Root.js","index.js"],"names":["fetchImagesHelper","url","fetchSuccessCb","fetch","then","response","json","data","children","map","child","posts","filter","post","post_hint","image_posts","catch","error","console","log","fetchImages","subreddit","cb","f","RedditViewerContext","createContext","useRedditViewer","useContext","RedditViewerProvider","useState","subReddit","setSubReddit","setPosts","lastPost","length","replacePosts","newPosts","appendPosts","getImagePosts","actions","providerValues","changeSubReddit","newSubReddit","refreshSubReddit","fetchMoreImages","name","useEffect","Provider","value","ControlBar","props","subInput","setSubInput","Container","className","Form","onSubmit","sub","trim","startsWith","replace","Grid","stackable","fluid","columns","Column","width","Input","placeholder","onChange","e","target","list","id","Button","primary","type","secondary","onClick","Gallery","cols","pics","imagePost","domain","includes","textAlign","imagesRows","image","index","key","style","Card","Content","Header","title","Image","src","href","extra","permalink","Icon","size","makeImage","reduce","rows","push","row","Row","BottomControlBar","window","scrollTo","text","List","bulleted","as","Item","Root","App","Component","render","document","getElementById"],"mappings":"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","file":"static/js/main.2082cf51.chunk.js","sourcesContent":["\r\nconst fetchImagesHelper = (url, fetchSuccessCb) => {\r\n    fetch(url)\r\n        .then(response => response.json())\r\n        .then(json => json.data.children.map(child => child.data))\r\n        .then(posts => posts.filter(post => post.post_hint===\"image\" || post.post_hint===\"link\"))\r\n        .then(image_posts => fetchSuccessCb(image_posts))\r\n        .catch(error => console.log('An error occurred while fetching subreddit %s data. ', url, error))\r\n}\r\n\r\n\r\nexport function fetchImages(subreddit=\"aww\", cb = f => f) {\r\n    let url = \"https://www.reddit.com/r/\" + subreddit + \".json\";\r\n    fetchImagesHelper(url, cb);\r\n}\r\n\r\nexport function fetchAdditionalSubredditImages(subreddit = \"aww\", cb = f => f, lastPost) {\r\n    if (lastPost !== null && 'name' in lastPost) {\r\n        let url = \"https://www.reddit.com/r/\" + subreddit + \".json?after=\" + lastPost.name\r\n        fetchImagesHelper(url, cb);\r\n        return;\r\n    }\r\n\r\n    fetchImages(subreddit, cb);\r\n}\r\n","import React, { \r\n    useState,\r\n    createContext, useContext,\r\n    useEffect } from 'react'\r\n\r\nimport * as actions from '../actions/index'\r\n\r\nconst RedditViewerContext = createContext(\"RedditViewerContext\");\r\nexport const useRedditViewer = () => useContext(RedditViewerContext);\r\n\r\nexport default function RedditViewerProvider({children}) {\r\n\r\n    const [subReddit, setSubReddit] = useState(\"aww\");\r\n    const [posts, setPosts] = useState([]);\r\n    \r\n    const lastPost = (posts && posts.length !== 0) ? posts[posts.length - 1] : null;\r\n\r\n    const replacePosts =  (newPosts = []) => {\r\n        // console.log(newPosts);\r\n        setPosts(newPosts);\r\n    }\r\n\r\n    const appendPosts = (newPosts = []) => setPosts([...posts, ...newPosts]);\r\n\r\n    const getImagePosts = () => actions.fetchImages(subReddit, replacePosts);\r\n\r\n    const providerValues = {\r\n        subReddit,\r\n        posts,\r\n        changeSubReddit : (newSubReddit = \"aww\") => setSubReddit(newSubReddit),\r\n        refreshSubReddit : getImagePosts,\r\n        fetchMoreImages : () => actions.fetchAdditionalSubredditImages(subReddit, appendPosts, lastPost),\r\n    }\r\n\r\n    useEffect(getImagePosts, [subReddit]);\r\n\r\n    return <>\r\n        <RedditViewerContext.Provider value={{...providerValues}}>\r\n            {children}\r\n        </RedditViewerContext.Provider>\r\n    </>\r\n};\r\n","import React, {useState} from 'react'\nimport { Grid, Button, Container, Form } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport '../css/index.css'\n\nimport {useRedditViewer} from '../providers/RedditViewerProvider'\n\nexport default function ControlBar(props) {\n    const {subreddit, changeSubReddit, refreshSubReddit} = useRedditViewer();\n    const [subInput, setSubInput] = useState(subreddit);\n\n    const handleFetch = () => {\n        let sub = subInput;\n        if (!sub) return;\n\n        sub = sub.trim();       \n\n        if (sub.startsWith(\"r/\")) {\n            sub = sub.replace(\"r/\", \"\")\n        }\n\n        if (sub === \"\") return;\n\n        changeSubReddit(sub);\n    }\n\n    const handleRefresh = () => refreshSubReddit();\n\n    const handleInputChange = e => setSubInput(e.target.value)\n\n    return <>\n        <Container className=\"control-bar-container\">\n            <Form onSubmit={handleFetch}>\n            <Grid stackable fluid columns={3}>\n                <Grid.Column width={8}>\n                    <Form.Input name=\"subreddit\" value={subInput} fluid placeholder='aww' onChange={handleInputChange} list='prefsubs'/>\n                    <datalist id=\"prefsubs\">\n                        <option value='aww' />\n                        <option value='earthporn' />\n                        <option value='historyinpics' />\n                        <option value='historyporn' />\n                        <option value='hdpics' />\n                        <option value='images' />\n                        <option value='dogs' />\n                        <option value='cats' />\n                    </datalist>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Form.Button fluid primary  type=\"submit\">Fetch</Form.Button>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Button fluid secondary type='button' onClick={handleRefresh}>Refresh</Button>\n                </Grid.Column>\n            </Grid>\n            </Form>\n        </Container>\n    </>\n}\n","import React from 'react'\nimport { Grid, Image, Container, Card, Icon } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport {useRedditViewer} from \"../providers/RedditViewerProvider\"\n\nconst calculateTotalRows = (length, cols) => {\n    if (length === 0)\n        return 0\n    \n    return parseInt(length / cols, 10) + 1\n}\n\nconst sanitizeForImgur = url => {\n    if (url.includes(\"i.imgur.com\"))\n        return url\n    \n    if (url.includes(\"imgur.com\"))\n        return url.replace(\"imgur.com\", \"i.imgur.com\")\n    \n    return url\n}\n\nconst makeImage = ({image, style={}}) => (\n    <div style={style}>\n        <Card fluid>\n            <Card.Content textAlign='center'>\n                <Card.Header>{image.title}</Card.Header>\n            </Card.Content>\n            <Image src={image.url} href={sanitizeForImgur(image.url)} target=\"_blank\" />\n            <Card.Content textAlign='center' extra>\n                <a href={\"https://reddit.com\" + image.permalink} target=\"_blank\"><Icon name='reddit' size='huge'></Icon></a>\n            </Card.Content>\n        </Card>\n    </div>\n)\n\n// const makeGif = (url) => {\n//     // gyfcat\n//     if (url.includes(\"gfycat\"))\n//         return <div><iframe src={url} frameborder='0' scrolling='no' width='900' height='720' allowfullscreen></iframe></div>\n\n//     if (url.includes(\"imgur\"))\n//         return <div><blockquote class=\"imgur-embed-pub\" lang=\"en\"><a href={url}></a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script></div>\n\n//     return url\n// }\n\nconst isImageDomain = domain => domain.includes(\"imgur\") || domain.includes(\"i.redd\");\n\nconst filterImagesByDomains = (imagePosts) => {\n    return imagePosts.filter(imagePost => isImageDomain(imagePost.domain));\n}\n\nconst ImagesRow = (props) => {\n    return <Grid.Row>{props.row}</Grid.Row>\n}\n\nconst Gallery = ({cols=3}) => {\n    const {posts} = useRedditViewer();\n\n    let pics = filterImagesByDomains(posts);\n    if (pics.length === 0)\n        return <Container textAlign='center' className='gallery-container'>No Images Available</Container>\n\n    // let totalRows = calculateTotalRows(pics.length, cols)\n    \n    let imageItems = pics.map((image, index) => <Grid.Column key={index}>{makeImage({image})}</Grid.Column>)\n\n    let imagesGrid = imageItems.reduce((rows, key, index) => (index % cols === 0 ? rows.push([key]) \n                                                                : rows[rows.length-1].push(key)) && rows, []);\n   \n    let imagesRows = imagesGrid.map((row, index) => <Grid.Row key={index}>{row}</Grid.Row>)\n    \n    // let gifRows = gifs.map(gif => <Grid.Row>{makeGif(gif.url)}</Grid.Row>)\n    \n    return <div className=\"gallery-container\">\n        <Container fluid>\n        <Grid columns={cols} stackable>\n            {imagesRows}\n            {/* {gifRows} */}\n        </Grid>\n    </Container>\n    </div>\n}\n\nexport default Gallery\n","import React from 'react'\r\nimport { Container, Button, List } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport '../css/index.css'\r\n\r\nimport { useRedditViewer } from '../providers/RedditViewerProvider'\r\n\r\nexport default function BottomControlBar(props) {\r\n\r\n    const {fetchMoreImages} = useRedditViewer();\r\n\r\n    return <>\r\n    <Container textAlign='center' className='bottom-control-bar-container'>\r\n        <Button primary onClick={(e) => fetchMoreImages()}>Fetch More Images</Button>\r\n        <Button secondary onClick={(e) => window.scrollTo(0, 0)}>Back To Top</Button>\r\n        <Container text textAlign='left' className=\"guide-notes-container\">\r\n            <List bulleted as='ol'>\r\n                <List.Item as='li' value=\"*\">Notes...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value=\"-\">No tracking, no cookies, no cache, no ads.... (Reddit might still track you)</List.Item>\r\n                        <List.Item as='li' value=\"-\">Firefox private mode - Need to disable tracking / blocking (Green lock symbol on left of address bar)</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n                <List.Item as='li' value=\"*\">Warning...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value='-'>NSFW content is not filtered automatically. Sorry!!</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n            </List>\r\n        </Container>\r\n    </Container>\r\n    </>\r\n}\r\n","import React from 'react';\n\nimport { Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport ControlBar from '../components/topcontrolbar'\nimport Gallery from '../components/gallery'\nimport BottomControlBar from '../components/bottomcontrolbar'\n\n\nexport default function() {\n    return <>\n        <Container fluid>\n            <ControlBar id=\"top-bar\" />\n            <Gallery />\n            <BottomControlBar />\n        </Container>\n    </>\n}\n","import React, { Component } from 'react'\r\n\r\nimport App from './App'\r\nimport RedditViewerProvider from '../providers/RedditViewerProvider'\r\n\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n        <RedditViewerProvider>\r\n          <App />\r\n        </RedditViewerProvider>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(\n  <Root />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}