{"version":3,"sources":["actions/index.js","reducers/index.js","components/topcontrolbar.js","containers/topcontrolbar.js","components/gallery.js","containers/gallery.js","components/bottomcontrolbar.js","containers/bottomcontrolbar.js","containers/App.js","containers/Root.js","index.js"],"names":["SUBREDDIT_SELECTED","subredditSelected","subreddit","type","POSTS_RECEIVED","postsReceived","posts","last","length","name","fetchSubredditImages","refresh","dispatch","getState","subredditdata","fetchImages","url","prefixPosts","fetch","then","response","json","error","console","log","data","children","map","child","filter","post","post_hint","image_posts","title","hint","permalink","image_data","rootReducer","combineReducers","activesub","state","action","ControlBar","props","handleFetch","sub","trim","startsWith","replace","onFetch","handleRefresh","onRefresh","handleChange","e","value","setState","bind","this","Container","className","Form","onSubmit","Grid","stackable","fluid","columns","Column","width","Input","placeholder","onChange","list","id","Button","primary","content","secondary","onClick","React","Component","connect","Gallery","cols","pics","image","parseInt","calculateTotalRows","textAlign","imageItems","Card","Content","Header","Image","src","href","includes","target","extra","Icon","size","makeImage","imagesRows","reduce","rows","key","index","push","row","Row","postsForActiveSubreddit","BottomControlBar","window","scrollTo","text","List","bulleted","as","Item","subdata","App","store","createStore","applyMiddleware","thunkMiddleware","Root","render","document","getElementById"],"mappings":"yTACaA,EAAqB,qBACrBC,EAAoB,SAACC,GAAD,MAAgB,CAC7CC,KAAOH,EACPE,cAISE,EAAiB,iBACjBC,EAAgB,SAACH,EAAWI,GAAZ,MAAuB,CAChDH,KAAOC,EACPF,YACAI,QACAC,KAAOD,GAA0B,IAAjBA,EAAME,OAAeF,EAAMA,EAAME,OAAS,GAAGC,KAAO,OAIjE,SAASC,IAAsD,IAAjCR,EAAgC,uDAAtB,MAAOS,EAAe,wDACjE,OAAO,SAACC,EAAUC,GACd,IAAKF,GAAWE,IAAWC,cAAcZ,IACoB,IAArDW,IAAWC,cAAcZ,GAAWI,MAAME,OAI9C,OAFAI,EAASX,EAAkBC,SAC3BU,EAASP,EAAcH,EAAWW,IAAWC,cAAcZ,GAAWI,QAK1EM,EAASG,EADC,4BAA8Bb,EAAY,QAC1BA,KAwB3B,SAASa,EAAYC,GAAuC,IAAlCd,EAAiC,uDAAvB,MAAOe,EAAgB,uDAAJ,GAC1D,OAAO,SAACL,GACJ,OAAOM,MAAMF,GACZG,MACG,SAAAC,GAAQ,OAAIA,EAASC,UAKrB,SAAAC,GAAK,OAAIC,QAAQC,IAAI,uDAAwDtB,EAAWoB,MAE3FH,MAAK,SAAAE,GAAI,OACNA,EAAKI,KAAKC,SAASC,KAAI,SAAAC,GAAK,OAAIA,EAAMH,WAEzCN,MAAK,SAAAb,GAAK,OACPA,EAAMuB,QAAO,SAAAC,GAAI,MAAqB,UAAjBA,EAAKC,WAAwC,SAAjBD,EAAKC,gBAEzDZ,MAAK,SAAAa,GAAW,OACbA,EAAYL,KAAI,SAAAG,GAAI,MAAK,CAAEd,IAAMc,EAAKd,IACXiB,MAAQH,EAAKG,MACbC,KAAOJ,EAAKC,UACZtB,KAAOqB,EAAKrB,KACZ0B,UAAYL,EAAKK,iBAE/ChB,MAAK,SAAAiB,GACExB,EAASX,EAAkBC,IAE3B,IAAII,EAAK,sBAAOW,GAAP,YAAuBmB,IAChCxB,EAASP,EAAcH,EAAWI,Q,8NC7ClD,IAMe+B,EANKC,YAAgB,CAChCC,UA/BJ,WAAyC,IAAtBC,EAAqB,uDAAf,MAAOC,EAAQ,uCACpC,OAAQA,EAAOtC,MACX,KAAKH,EACD,OAAOyC,EAAOvC,UAClB,QACI,OAAOsC,IA2Bf1B,cAvBJ,WAKgC,IALT0B,EAKQ,uDALF,CACG,IAAQ,CACJlC,MAAQ,KAGrBmC,EAAQ,uCAC3B,OAAOA,EAAOtC,MACV,KAAKC,EACD,O,yVAAO,CAAP,GACeoC,EADf,eAEaC,EAAOvC,UAAa,CACjBI,MAAQmC,EAAOnC,MACfC,KAAOkC,EAAOlC,QAIlC,QACI,OAAOiC,M,oDCuCJE,G,mBA9DX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAUVC,YAAc,WACV,IAAIC,EAAM,EAAKL,MAAMtC,WACrB2C,EAAMA,EAAIC,QACFC,WAAW,QACfF,EAAMA,EAAIG,QAAQ,KAAM,KAG5B,EAAKL,MAAMM,QAAQJ,IAlBJ,EAqBnBK,cAAgB,WACZ,EAAKP,MAAMQ,UAAU,EAAKX,MAAMtC,YAtBjB,EAyBnBkD,aAAe,SAACC,EAAD,OAAM5C,EAAN,EAAMA,KAAM6C,EAAZ,EAAYA,MAAZ,OAAwB,EAAKC,SAAL,eAAiB9C,EAAO6C,KAvB3D,EAAKV,YAAYY,KAAjB,gBACA,EAAKN,cAAcM,KAAnB,gBACA,EAAKJ,aAAaI,KAAlB,gBAEA,EAAKhB,MAAQ,CACTtC,UAAY,IAPD,E,sEA2BT,IACDA,EAAauD,KAAKjB,MAAlBtC,UACL,OAAO,kBAACwD,EAAA,EAAD,CAAWC,UAAU,yBACxB,kBAACC,EAAA,EAAD,CAAMC,SAAUJ,KAAKb,aACrB,kBAACkB,EAAA,EAAD,CAAMC,WAAS,EAACC,OAAK,EAACC,QAAS,GAC3B,kBAACH,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACP,EAAA,EAAKQ,MAAN,CAAY3D,KAAK,YAAY6C,MAAOpD,EAAW8D,OAAK,EAACK,YAAY,MAAMC,SAAUb,KAAKL,aAAcmB,KAAK,aACzG,8BAAUC,GAAG,YACT,4BAAQlB,MAAM,QACd,4BAAQA,MAAM,cACd,4BAAQA,MAAM,kBACd,4BAAQA,MAAM,gBACd,4BAAQA,MAAM,WACd,4BAAQA,MAAM,WACd,4BAAQA,MAAM,SACd,4BAAQA,MAAM,WAGtB,kBAACQ,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACP,EAAA,EAAKa,OAAN,CAAaT,OAAK,EAACU,SAAO,EAAEC,QAAQ,UAApC,UAEJ,kBAACb,EAAA,EAAKI,OAAN,CAAaC,MAAO,GAChB,kBAACM,EAAA,EAAD,CAAQT,OAAK,EAACY,WAAS,EAACzE,KAAK,SAAS0E,QAASpB,KAAKP,eAApD,mB,GAnDK4B,IAAMC,YCKhBC,cAAQ,MALI,SAACpE,GAAD,MAAe,CACtCqC,QAAU,SAAC/C,GAAD,OAAeU,EAASF,EAAqBR,KACvDiD,UAAY,SAACjD,GAAD,OAAeU,EAASF,EAAqBR,GAJ7C,QAOD8E,CAAkCtC,G,0BCoElCuC,EAlCC,SAAC,GAAqB,IAApB3E,EAAmB,EAAnBA,MAAmB,IAAZ4E,YAAY,MAAP,EAAO,EAC7BC,EAAO7E,EAAMuB,QAAO,SAAAuD,GAAK,MAAmB,UAAfA,EAAMlD,QAKvC,GAAkB,IA9CK,SAAC1B,EAAQ0E,GAChC,OAAe,IAAX1E,EACO,EAEJ6E,SAAS7E,EAAS0E,EAAM,IAAM,EAwCrBI,CAAmBH,EAAK3E,OAAQ0E,GAG5C,OAAO,kBAACxB,EAAA,EAAD,CAAW6B,UAAU,SAAS5B,UAAU,qBAAxC,uBAEX,IAAI6B,EAAaL,EAAKxD,KAAI,SAAAyD,GAAK,OAAI,kBAACtB,EAAA,EAAKI,OAAN,KAhCrB,SAACkB,GAAD,OACd,kBAACK,EAAA,EAAD,CAAMzB,OAAK,GACP,kBAACyB,EAAA,EAAKC,QAAN,CAAcH,UAAU,UACpB,kBAACE,EAAA,EAAKE,OAAN,KAAcP,EAAMnD,QAExB,kBAAC2D,EAAA,EAAD,CAAOC,IAAKT,EAAMpE,IAAK8E,MAfN9E,EAe6BoE,EAAMpE,IAdpDA,EAAI+E,SAAS,eACN/E,EAEPA,EAAI+E,SAAS,aACN/E,EAAIgC,QAAQ,YAAa,eAE7BhC,GAQuDgF,OAAO,WACjE,kBAACP,EAAA,EAAKC,QAAN,CAAcH,UAAU,SAASU,OAAK,GAClC,uBAAGH,KAAM,qBAAuBV,EAAMjD,UAAW6D,OAAO,UAAS,kBAACE,EAAA,EAAD,CAAMzF,KAAK,SAAS0F,KAAK,YAjB7E,IAAAnF,EA0C4BoF,CAAUhB,OACvDI,EAAWhF,QACXe,QAAQC,IAAI2D,EAAK,GAAGhD,WAExB,IAGIkE,EAHab,EAAWc,QAAO,SAACC,EAAMC,EAAKC,GAAZ,OAAuBA,EAAQvB,IAAS,EAAIqB,EAAKG,KAAK,CAACF,IAC5BD,EAAKA,EAAK/F,OAAO,GAAGkG,KAAKF,KAASD,IAAM,IAE1E5E,KAAI,SAACgF,GAAD,OAAS,kBAAC7C,EAAA,EAAK8C,IAAN,KAAWD,MAGpD,OAAO,yBAAKhD,UAAU,qBAClB,kBAACD,EAAA,EAAD,CAAWM,OAAK,GAChB,kBAACF,EAAA,EAAD,CAAMG,QAASiB,EAAMnB,WAAS,GACzBsC,MChETQ,EAA0B,SAACrE,GAE3B,OAAIA,EAAMD,WAAaC,EAAM1B,cAAc0B,EAAMD,YAEzCC,EAAM1B,cAAc0B,EAAMD,WAAWjC,MAE9BkC,EAAM1B,cAAc0B,EAAMD,WAAWjC,MAI7C,IAOI0E,eAJS,SAACxC,GAAD,MAAY,CAChClC,MAASuG,EAAwBrE,MAGG,KAAzBwC,CAA+BC,G,SCY/B6B,EA1BU,SAAC,GAAD,IAAE7D,EAAF,EAAEA,QAAF,OACrB,kBAACS,EAAA,EAAD,CAAW6B,UAAU,SAAS5B,UAAU,gCACpC,kBAACc,EAAA,EAAD,CAAQC,SAAO,EAACG,QAAS,SAACxB,GAAD,OAAOJ,MAAhC,qBACA,kBAACwB,EAAA,EAAD,CAAQG,WAAS,EAACC,QAAS,SAACxB,GAAD,OAAO0D,OAAOC,SAAS,EAAG,KAArD,eACA,kBAACtD,EAAA,EAAD,CAAWuD,MAAI,EAAC1B,UAAU,OAAO5B,UAAU,yBACvC,kBAACuD,EAAA,EAAD,CAAMC,UAAQ,EAACC,GAAG,MACd,kBAACF,EAAA,EAAKG,KAAN,CAAWD,GAAG,KAAK9D,MAAM,KAAzB,WACI,kBAAC4D,EAAA,EAAKG,KAAN,CAAWD,GAAG,MACV,kBAACF,EAAA,EAAKG,KAAN,CAAWD,GAAG,KAAK9D,MAAM,KAAzB,gFACA,kBAAC4D,EAAA,EAAKG,KAAN,CAAWD,GAAG,KAAK9D,MAAM,KAAzB,2GAGR,kBAAC4D,EAAA,EAAKG,KAAN,CAAWD,GAAG,KAAK9D,MAAM,KAAzB,aACI,kBAAC4D,EAAA,EAAKG,KAAN,CAAWD,GAAG,MACV,kBAACF,EAAA,EAAKG,KAAN,CAAWD,GAAG,KAAK9D,MAAM,KAAzB,6DCZT0B,cAAQ,MAJI,SAACpE,GAAD,MAAe,CACtCqC,QAAU,kBAAMrC,GP4BT,SAACA,EAAUC,GACd,IAAIX,EAAYW,IAAW0B,UAC3B,GAAI1B,IAAWC,cAAcZ,GAC7B,CACI,IAAIoH,EAAUzG,IAAWC,cAAcZ,GACnCoH,EAAQ/G,MAIRK,EAASG,EADC,4BAA8Bb,EAAY,eADnCoH,EAAQ/G,KAECL,EAAWoH,EAAQhH,aAKjDM,EAASF,EAAqBR,WOvC3B8E,CAAkCtC,GCclC6E,E,iLAVP,OACI,kBAAC7D,EAAA,EAAD,CAAWM,OAAK,GACZ,kBAAC,EAAD,CAAYQ,GAAG,YACf,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANEO,aCEZyC,EAAQC,YACZpF,EACAqF,YACEC,MAKiBC,E,iLAEjB,OACI,kBAAC,IAAD,CAAUJ,MAAOA,GACb,kBAAC,EAAD,W,GAJsBzC,aChBlC8C,iBACE,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.76639487.chunk.js","sourcesContent":["\r\nexport const SUBREDDIT_SELECTED = \"SUBREDDIT_SELECTED\"\r\nexport const subredditSelected = (subreddit) => ({\r\n    type : SUBREDDIT_SELECTED,\r\n    subreddit\r\n})\r\n\r\n\r\nexport const POSTS_RECEIVED = \"POSTS_RECEIVED\"\r\nexport const postsReceived = (subreddit, posts) => ({\r\n    type : POSTS_RECEIVED,\r\n    subreddit,\r\n    posts,\r\n    last : posts && posts.length !== 0 ? posts[posts.length - 1].name : null\r\n})\r\n\r\n\r\nexport function fetchSubredditImages(subreddit=\"aww\", refresh=false) {\r\n    return (dispatch, getState) => {\r\n        if (!refresh && getState().subredditdata[subreddit] && \r\n                getState().subredditdata[subreddit].posts.length !== 0)\r\n        {\r\n            dispatch(subredditSelected(subreddit))\r\n            dispatch(postsReceived(subreddit, getState().subredditdata[subreddit].posts))\r\n            return\r\n        }\r\n\r\n        let url = \"https://www.reddit.com/r/\" + subreddit + \".json\"\r\n        dispatch(fetchImages(url, subreddit))\r\n    }\r\n}\r\n\r\nexport function fetchAdditionalSubredditImages() {\r\n    return (dispatch, getState) => {\r\n        let subreddit = getState().activesub\r\n        if (getState().subredditdata[subreddit])\r\n        {\r\n            let subdata = getState().subredditdata[subreddit]\r\n            if (subdata.last)\r\n            {\r\n                let lastPostId = subdata.last\r\n                let url = \"https://www.reddit.com/r/\" + subreddit + \".json?after=\" + lastPostId\r\n                dispatch(fetchImages(url, subreddit, subdata.posts))\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dispatch(fetchSubredditImages(subreddit))\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchImages(url, subreddit=\"aww\", prefixPosts=[]) {\r\n    return (dispatch) => {\r\n        return fetch(url)\r\n        .then(\r\n            response => response.json(),\r\n            // Do not use catch, because that will also catch\r\n            // any errors in the dispatch and resulting render,\r\n            // causing a loop of 'Unexpected batch number' errors.\r\n            // https://github.com/facebook/react/issues/6895\r\n            error => console.log('An error occurred while fetching subreddit %s data. ', subreddit, error)\r\n        )\r\n        .then(json =>\r\n            json.data.children.map(child => child.data)\r\n        )\r\n        .then(posts => \r\n            posts.filter(post => post.post_hint===\"image\" || post.post_hint===\"link\")\r\n        )\r\n        .then(image_posts => \r\n            image_posts.map(post => ({ url : post.url,\r\n                                       title : post.title, \r\n                                       hint : post.post_hint,\r\n                                       name : post.name,\r\n                                       permalink : post.permalink }))\r\n        )\r\n        .then(image_data => {\r\n                dispatch(subredditSelected(subreddit))\r\n\r\n                let posts = [...prefixPosts, ...image_data]\r\n                dispatch(postsReceived(subreddit, posts))\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n","import {combineReducers} from 'redux'\r\nimport { POSTS_RECEIVED, SUBREDDIT_SELECTED } from '../actions'\r\n\r\n//TODO\r\n\r\nfunction activesub(state=\"aww\", action) {\r\n    switch (action.type) {\r\n        case SUBREDDIT_SELECTED : \r\n            return action.subreddit\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction subredditdata(state={\r\n                                \"aww\" : {\r\n                                    posts : []\r\n                                }\r\n                            },\r\n                       action) {\r\n    switch(action.type) {\r\n        case POSTS_RECEIVED : {\r\n            return {\r\n                        ...state,\r\n                        [action.subreddit] : {\r\n                            posts : action.posts,\r\n                            last : action.last\r\n                        },\r\n                    }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    activesub,\r\n    subredditdata,\r\n})\r\n\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Grid, Button, Container, Form } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport '../css/index.css'\r\n\r\nclass ControlBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleFetch.bind(this)\r\n        this.handleRefresh.bind(this)\r\n        this.handleChange.bind(this)\r\n\r\n        this.state = {\r\n            subreddit : \"\"\r\n        }\r\n    }\r\n\r\n    handleFetch = () => {\r\n        let sub = this.state.subreddit\r\n        sub = sub.trim()\r\n        if (sub.startsWith(\"r/\")) {\r\n            sub = sub.replace(\"r/\", \"\")\r\n        }\r\n\r\n        this.props.onFetch(sub)\r\n    }\r\n\r\n    handleRefresh = () => {\r\n        this.props.onRefresh(this.state.subreddit)\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\r\n\r\n    render() {\r\n        let {subreddit} = this.state\r\n        return <Container className=\"control-bar-container\">\r\n            <Form onSubmit={this.handleFetch}>\r\n            <Grid stackable fluid columns={3}>\r\n                <Grid.Column width={8}>\r\n                    <Form.Input name=\"subreddit\" value={subreddit} fluid placeholder='aww' onChange={this.handleChange} list='prefsubs'/>\r\n                    <datalist id=\"prefsubs\">\r\n                        <option value='aww' />\r\n                        <option value='earthporn' />\r\n                        <option value='historyinpics' />\r\n                        <option value='historyporn' />\r\n                        <option value='hdpics' />\r\n                        <option value='images' />\r\n                        <option value='dogs' />\r\n                        <option value='cats' />\r\n                    </datalist>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Form.Button fluid primary  content=\"submit\">Fetch</Form.Button>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Button fluid secondary type='button' onClick={this.handleRefresh}>Refresh</Button>\r\n                </Grid.Column>\r\n            </Grid>\r\n            </Form>\r\n        </Container>\r\n    }\r\n}\r\n\r\nControlBar.propTypes = {\r\n    onFetch : PropTypes.func.isRequired,\r\n    onRefresh : PropTypes.func.isRequired\r\n}\r\n\r\nexport default ControlBar\r\n","import { connect } from 'react-redux'\r\nimport ControlBar from '../components/topcontrolbar'\r\nimport { fetchSubredditImages } from '../actions';\r\n\r\nlet isRefresh = true;\r\n\r\nconst mapPropsToDispatch = (dispatch) => ({\r\n    onFetch : (subreddit) => dispatch(fetchSubredditImages(subreddit)),\r\n    onRefresh : (subreddit) => dispatch(fetchSubredditImages(subreddit, isRefresh))\r\n})\r\n\r\nexport default connect(null, mapPropsToDispatch)(ControlBar)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Grid, Image, Container, Card, Icon } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst calculateTotalRows = (length, cols) => {\r\n    if (length === 0)\r\n        return 0\r\n    \r\n    return parseInt(length / cols, 10) + 1\r\n}\r\n\r\nconst sanitizeForImgur = url => {\r\n    if (url.includes(\"i.imgur.com\"))\r\n        return url\r\n    \r\n    if (url.includes(\"imgur.com\"))\r\n        return url.replace(\"imgur.com\", \"i.imgur.com\")\r\n    \r\n    return url\r\n}\r\n\r\nconst makeImage = (image) => (\r\n    <Card fluid>\r\n        <Card.Content textAlign='center'>\r\n            <Card.Header>{image.title}</Card.Header>\r\n        </Card.Content>\r\n        <Image src={image.url} href={sanitizeForImgur(image.url)} target=\"_blank\" />\r\n        <Card.Content textAlign='center' extra>\r\n            <a href={\"https://reddit.com\" + image.permalink} target=\"_blank\"><Icon name='reddit' size='huge'></Icon></a>\r\n        </Card.Content>\r\n    </Card>\r\n)\r\n\r\n// const makeGif = (url) => {\r\n//     // gyfcat\r\n//     if (url.includes(\"gfycat\"))\r\n//         return <div><iframe src={url} frameborder='0' scrolling='no' width='900' height='720' allowfullscreen></iframe></div>\r\n\r\n//     if (url.includes(\"imgur\"))\r\n//         return <div><blockquote class=\"imgur-embed-pub\" lang=\"en\"><a href={url}></a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script></div>\r\n\r\n//     return url\r\n// }\r\n\r\nconst Gallery = ({posts, cols=3}) => {\r\n    let pics = posts.filter(image => image.hint === \"image\")\r\n    // let gifs = posts.filter(image => image.hint === \"link\")\r\n\r\n    let totalRows = calculateTotalRows(pics.length, cols)\r\n    \r\n    if (totalRows === 0)\r\n        return <Container textAlign='center' className='gallery-container'>No Images Available</Container>\r\n    \r\n    let imageItems = pics.map(image => <Grid.Column>{makeImage(image)}</Grid.Column>)\r\n    if (imageItems.length)\r\n        console.log(pics[0].permalink)\r\n\r\n    let imagesGrid = imageItems.reduce((rows, key, index) => (index % cols === 0 ? rows.push([key]) \r\n                                                                : rows[rows.length-1].push(key)) && rows, []);\r\n   \r\n    let imagesRows = imagesGrid.map((row) => <Grid.Row>{row}</Grid.Row>)\r\n    // let gifRows = gifs.map(gif => <Grid.Row>{makeGif(gif.url)}</Grid.Row>)\r\n    \r\n    return <div className=\"gallery-container\">\r\n        <Container fluid>\r\n        <Grid columns={cols} stackable>\r\n            {imagesRows}\r\n            {/* {gifRows} */}\r\n        </Grid>\r\n    </Container>\r\n    </div>\r\n}\r\n\r\nGallery.propTypes = {\r\n    posts : PropTypes.array.isRequired,\r\n    cols : PropTypes.number\r\n}\r\n\r\nexport default Gallery","import { connect } from 'react-redux'\r\nimport Gallery from '../components/gallery'\r\n\r\nlet postsForActiveSubreddit = (state) => {\r\n    \r\n    if (state.activesub && state.subredditdata[state.activesub])\r\n    {\r\n        if (state.subredditdata[state.activesub].posts)\r\n        {\r\n            return state.subredditdata[state.activesub].posts\r\n        }\r\n    }\r\n    \r\n    return []\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts :  postsForActiveSubreddit(state) \r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Gallery)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Container, Button, Header, List } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport '../css/index.css'\r\n\r\nconst BottomControlBar = ({onFetch}) => (\r\n    <Container textAlign='center' className='bottom-control-bar-container'>\r\n        <Button primary onClick={(e) => onFetch()}>Fetch More Images</Button>\r\n        <Button secondary onClick={(e) => window.scrollTo(0, 0)}>Back To Top</Button>\r\n        <Container text textAlign='left' className=\"guide-notes-container\">\r\n            <List bulleted as='ol'>\r\n                <List.Item as='li' value=\"*\">Notes...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value=\"-\">No tracking, no cookies, no cache, no ads.... (Reddit might still track you)</List.Item>\r\n                        <List.Item as='li' value=\"-\">Firefox private mode - Need to disable tracking / blocking (Green lock symbol on left of address bar)</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n                <List.Item as='li' value=\"*\">Warning...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value='-'>NSFW content is not filtered automatically. Sorry!!</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n            </List>\r\n        </Container>\r\n    </Container>\r\n)\r\n\r\nBottomControlBar.propTypes = {\r\n    onFetch : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BottomControlBar\r\n","import { connect } from 'react-redux'\r\nimport ControlBar from '../components/bottomcontrolbar'\r\nimport { fetchAdditionalSubredditImages } from '../actions';\r\n\r\nconst mapPropsToDispatch = (dispatch) => ({    \r\n    onFetch : () => dispatch(fetchAdditionalSubredditImages()),\r\n})\r\n\r\nexport default connect(null, mapPropsToDispatch)(ControlBar)\r\n","import React, { Component } from 'react';\n\nimport { Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport ControlBar from './topcontrolbar'\nimport Gallery from './gallery'\nimport BottomControlBar from './bottomcontrolbar'\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Container fluid>\n                <ControlBar id=\"top-bar\" />\n                <Gallery />\n                <BottomControlBar />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\n// import { createLogger } from 'redux-logger'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport rootReducer from '../reducers'\r\n\r\nimport App from './App'\r\n\r\n// const loggerMiddleware = createLogger()\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware, // lets us dispatch() functions\r\n    // loggerMiddleware // neat middleware that logs actions\r\n  )\r\n)\r\n\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(\n  <Root />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}