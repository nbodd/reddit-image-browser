{"version":3,"sources":["actions/index.js","reducers/index.js","components/topcontrolbar.js","containers/topcontrolbar.js","components/gallery.js","containers/gallery.js","components/bottomcontrolbar.js","containers/bottomcontrolbar.js","containers/App.js","containers/Root.js","index.js"],"names":["SUBREDDIT_SELECTED","subredditSelected","subreddit","type","POSTS_RECEIVED","postsReceived","posts","last","length","name","fetchSubredditImages","arguments","undefined","refresh","dispatch","getState","subredditdata","fetchImages","url","prefixPosts","fetch","then","response","json","error","console","log","data","children","map","child","filter","post","post_hint","image_posts","title","hint","permalink","image_data","concat","Object","toConsumableArray","rootReducer","combineReducers","activesub","state","action","aww","objectSpread","defineProperty","ControlBar","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleFetch","sub","trim","startsWith","replace","onFetch","handleRefresh","onRefresh","handleChange","e","_ref","value","setState","bind","assertThisInitialized","react_default","a","createElement","Container","className","Form","onSubmit","Grid","stackable","fluid","columns","Column","width","Input","placeholder","onChange","list","id","Button","primary","content","secondary","onClick","React","Component","connect","Gallery","_ref$cols","cols","pics","image","parseInt","calculateTotalRows","textAlign","imageItems","Card","Content","Header","Image","src","href","includes","target","extra","Icon","size","makeImage","imagesRows","reduce","rows","key","index","push","row","Row","postsForActiveSubreddit","BottomControlBar","window","scrollTo","text","List","bulleted","as","Item","subdata","App","containers_topcontrolbar","containers_gallery","containers_bottomcontrolbar","store","createStore","applyMiddleware","thunkMiddleware","Root","es","containers_App","render","Root_Root","document","getElementById"],"mappings":"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","file":"static/js/main.d94c1da2.chunk.js","sourcesContent":["\r\nexport const SUBREDDIT_SELECTED = \"SUBREDDIT_SELECTED\"\r\nexport const subredditSelected = (subreddit) => ({\r\n    type : SUBREDDIT_SELECTED,\r\n    subreddit\r\n})\r\n\r\n\r\nexport const POSTS_RECEIVED = \"POSTS_RECEIVED\"\r\nexport const postsReceived = (subreddit, posts) => ({\r\n    type : POSTS_RECEIVED,\r\n    subreddit,\r\n    posts,\r\n    last : posts && posts.length !== 0 ? posts[posts.length - 1].name : null\r\n})\r\n\r\n\r\nexport function fetchSubredditImages(subreddit=\"aww\", refresh=false) {\r\n    return (dispatch, getState) => {\r\n        if (!refresh && getState().subredditdata[subreddit] && \r\n                getState().subredditdata[subreddit].posts.length !== 0)\r\n        {\r\n            dispatch(subredditSelected(subreddit))\r\n            dispatch(postsReceived(subreddit, getState().subredditdata[subreddit].posts))\r\n            return\r\n        }\r\n\r\n        let url = \"https://www.reddit.com/r/\" + subreddit + \".json\"\r\n        dispatch(fetchImages(url, subreddit))\r\n    }\r\n}\r\n\r\nexport function fetchAdditionalSubredditImages() {\r\n    return (dispatch, getState) => {\r\n        let subreddit = getState().activesub\r\n        if (getState().subredditdata[subreddit])\r\n        {\r\n            let subdata = getState().subredditdata[subreddit]\r\n            if (subdata.last)\r\n            {\r\n                let lastPostId = subdata.last\r\n                let url = \"https://www.reddit.com/r/\" + subreddit + \".json?after=\" + lastPostId\r\n                dispatch(fetchImages(url, subreddit, subdata.posts))\r\n            }\r\n        }\r\n        else\r\n        {\r\n            dispatch(fetchSubredditImages(subreddit))\r\n        }\r\n    }\r\n}\r\n\r\nexport function fetchImages(url, subreddit=\"aww\", prefixPosts=[]) {\r\n    return (dispatch) => {\r\n        return fetch(url)\r\n        .then(\r\n            response => response.json(),\r\n            // Do not use catch, because that will also catch\r\n            // any errors in the dispatch and resulting render,\r\n            // causing a loop of 'Unexpected batch number' errors.\r\n            // https://github.com/facebook/react/issues/6895\r\n            error => console.log('An error occurred while fetching subreddit %s data. ', subreddit, error)\r\n        )\r\n        .then(json =>\r\n            json.data.children.map(child => child.data)\r\n        )\r\n        .then(posts => \r\n            posts.filter(post => post.post_hint===\"image\" || post.post_hint===\"link\")\r\n        )\r\n        .then(image_posts => \r\n            image_posts.map(post => ({ url : post.url,\r\n                                       title : post.title, \r\n                                       hint : post.post_hint,\r\n                                       name : post.name,\r\n                                       permalink : post.permalink }))\r\n        )\r\n        .then(image_data => {\r\n                dispatch(subredditSelected(subreddit))\r\n\r\n                let posts = [...prefixPosts, ...image_data]\r\n                dispatch(postsReceived(subreddit, posts))\r\n            }\r\n        )\r\n    }\r\n}\r\n\r\n","import {combineReducers} from 'redux'\r\nimport { POSTS_RECEIVED, SUBREDDIT_SELECTED } from '../actions'\r\n\r\n//TODO\r\n\r\nfunction activesub(state=\"aww\", action) {\r\n    switch (action.type) {\r\n        case SUBREDDIT_SELECTED : \r\n            return action.subreddit\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nfunction subredditdata(state={\r\n                                \"aww\" : {\r\n                                    posts : []\r\n                                }\r\n                            },\r\n                       action) {\r\n    switch(action.type) {\r\n        case POSTS_RECEIVED : {\r\n            return {\r\n                        ...state,\r\n                        [action.subreddit] : {\r\n                            posts : action.posts,\r\n                            last : action.last\r\n                        },\r\n                    }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    activesub,\r\n    subredditdata,\r\n})\r\n\r\n\r\nexport default rootReducer\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Grid, Button, Container, Form } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport '../css/index.css'\r\n\r\nclass ControlBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props)\r\n        this.handleFetch.bind(this)\r\n        this.handleRefresh.bind(this)\r\n        this.handleChange.bind(this)\r\n\r\n        this.state = {\r\n            subreddit : \"\"\r\n        }\r\n    }\r\n\r\n    handleFetch = () => {\r\n        let sub = this.state.subreddit\r\n        sub = sub.trim()\r\n        if (sub.startsWith(\"r/\")) {\r\n            sub = sub.replace(\"r/\", \"\")\r\n        }\r\n\r\n        this.props.onFetch(sub)\r\n    }\r\n\r\n    handleRefresh = () => {\r\n        this.props.onRefresh(this.state.subreddit)\r\n    }\r\n\r\n    handleChange = (e, { name, value }) => this.setState({ [name]: value })\r\n\r\n    render() {\r\n        let {subreddit} = this.state\r\n        return <Container className=\"control-bar-container\">\r\n            <Form onSubmit={this.handleFetch}>\r\n            <Grid stackable fluid columns={3}>\r\n                <Grid.Column width={8}>\r\n                    <Form.Input name=\"subreddit\" value={subreddit} fluid placeholder='aww' onChange={this.handleChange} list='prefsubs'/>\r\n                    <datalist id=\"prefsubs\">\r\n                        <option value='aww' />\r\n                        <option value='earthporn' />\r\n                        <option value='historyinpics' />\r\n                        <option value='historyporn' />\r\n                        <option value='hdpics' />\r\n                        <option value='images' />\r\n                        <option value='dogs' />\r\n                        <option value='cats' />\r\n                    </datalist>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Form.Button fluid primary  content=\"submit\">Fetch</Form.Button>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Button fluid secondary type='button' onClick={this.handleRefresh}>Refresh</Button>\r\n                </Grid.Column>\r\n            </Grid>\r\n            </Form>\r\n        </Container>\r\n    }\r\n}\r\n\r\nControlBar.propTypes = {\r\n    onFetch : PropTypes.func.isRequired,\r\n    onRefresh : PropTypes.func.isRequired\r\n}\r\n\r\nexport default ControlBar\r\n","import { connect } from 'react-redux'\r\nimport ControlBar from '../components/topcontrolbar'\r\nimport { fetchSubredditImages } from '../actions';\r\n\r\nlet isRefresh = true;\r\n\r\nconst mapPropsToDispatch = (dispatch) => ({\r\n    onFetch : (subreddit) => dispatch(fetchSubredditImages(subreddit)),\r\n    onRefresh : (subreddit) => dispatch(fetchSubredditImages(subreddit, isRefresh))\r\n})\r\n\r\nexport default connect(null, mapPropsToDispatch)(ControlBar)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Grid, Image, Container, Card, Icon } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\n\r\nconst calculateTotalRows = (length, cols) => {\r\n    if (length === 0)\r\n        return 0\r\n    \r\n    return parseInt(length / cols, 10) + 1\r\n}\r\n\r\nconst sanitizeForImgur = url => {\r\n    if (url.includes(\"i.imgur.com\"))\r\n        return url\r\n    \r\n    if (url.includes(\"imgur.com\"))\r\n        return url.replace(\"imgur.com\", \"i.imgur.com\")\r\n    \r\n    return url\r\n}\r\n\r\nconst makeImage = (image) => (\r\n    <Card fluid>\r\n        <Card.Content textAlign='center'>\r\n            <Card.Header>{image.title}</Card.Header>\r\n        </Card.Content>\r\n        <Image src={image.url} href={sanitizeForImgur(image.url)} target=\"_blank\" />\r\n        <Card.Content textAlign='center' extra>\r\n            <a href={\"https://reddit.com\" + image.permalink} target=\"_blank\"><Icon name='reddit' size='huge'></Icon></a>\r\n        </Card.Content>\r\n    </Card>\r\n)\r\n\r\n// const makeGif = (url) => {\r\n//     // gyfcat\r\n//     if (url.includes(\"gfycat\"))\r\n//         return <div><iframe src={url} frameborder='0' scrolling='no' width='900' height='720' allowfullscreen></iframe></div>\r\n\r\n//     if (url.includes(\"imgur\"))\r\n//         return <div><blockquote class=\"imgur-embed-pub\" lang=\"en\"><a href={url}></a></blockquote><script async src=\"//s.imgur.com/min/embed.js\" charset=\"utf-8\"></script></div>\r\n\r\n//     return url\r\n// }\r\n\r\nconst Gallery = ({posts, cols=3}) => {\r\n    let pics = posts.filter(image => image.hint === \"image\")\r\n    // let gifs = posts.filter(image => image.hint === \"link\")\r\n\r\n    let totalRows = calculateTotalRows(pics.length, cols)\r\n    \r\n    if (totalRows === 0)\r\n        return <Container textAlign='center' className='gallery-container'>No Images Available</Container>\r\n    \r\n    let imageItems = pics.map(image => <Grid.Column>{makeImage(image)}</Grid.Column>)\r\n    if (imageItems.length)\r\n        console.log(pics[0].permalink)\r\n\r\n    let imagesGrid = imageItems.reduce((rows, key, index) => (index % cols === 0 ? rows.push([key]) \r\n                                                                : rows[rows.length-1].push(key)) && rows, []);\r\n   \r\n    let imagesRows = imagesGrid.map((row) => <Grid.Row>{row}</Grid.Row>)\r\n    // let gifRows = gifs.map(gif => <Grid.Row>{makeGif(gif.url)}</Grid.Row>)\r\n    \r\n    return <div className=\"gallery-container\">\r\n        <Container fluid>\r\n        <Grid columns={cols} stackable>\r\n            {imagesRows}\r\n            {/* {gifRows} */}\r\n        </Grid>\r\n    </Container>\r\n    </div>\r\n}\r\n\r\nGallery.propTypes = {\r\n    posts : PropTypes.array.isRequired,\r\n    cols : PropTypes.number\r\n}\r\n\r\nexport default Gallery","import { connect } from 'react-redux'\r\nimport Gallery from '../components/gallery'\r\n\r\nlet postsForActiveSubreddit = (state) => {\r\n    \r\n    if (state.activesub && state.subredditdata[state.activesub])\r\n    {\r\n        if (state.subredditdata[state.activesub].posts)\r\n        {\r\n            return state.subredditdata[state.activesub].posts\r\n        }\r\n    }\r\n    \r\n    return []\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    posts :  postsForActiveSubreddit(state) \r\n})\r\n\r\nexport default connect(mapStateToProps, null)(Gallery)\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Container, Button, Header, List } from 'semantic-ui-react'\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport '../css/index.css'\r\n\r\nconst BottomControlBar = ({onFetch}) => (\r\n    <Container textAlign='center' className='bottom-control-bar-container'>\r\n        <Button primary onClick={(e) => onFetch()}>Fetch More Images</Button>\r\n        <Button secondary onClick={(e) => window.scrollTo(0, 0)}>Back To Top</Button>\r\n        <Container text textAlign='left' className=\"guide-notes-container\">\r\n            <List bulleted as='ol'>\r\n                <List.Item as='li' value=\"*\">Notes...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value=\"-\">No tracking, no cookies, no cache, no ads.... (Reddit might still track you)</List.Item>\r\n                        <List.Item as='li' value=\"-\">Firefox private mode - Need to disable tracking / blocking (Green lock symbol on left of address bar)</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n                <List.Item as='li' value=\"*\">Warning...\r\n                    <List.Item as='ol'>\r\n                        <List.Item as='li' value='-'>NSFW content is not filtered automatically. Sorry!!</List.Item>\r\n                    </List.Item>\r\n                </List.Item>\r\n            </List>\r\n        </Container>\r\n    </Container>\r\n)\r\n\r\nBottomControlBar.propTypes = {\r\n    onFetch : PropTypes.func.isRequired,\r\n}\r\n\r\nexport default BottomControlBar\r\n","import { connect } from 'react-redux'\r\nimport ControlBar from '../components/bottomcontrolbar'\r\nimport { fetchAdditionalSubredditImages } from '../actions';\r\n\r\nconst mapPropsToDispatch = (dispatch) => ({    \r\n    onFetch : () => dispatch(fetchAdditionalSubredditImages()),\r\n})\r\n\r\nexport default connect(null, mapPropsToDispatch)(ControlBar)\r\n","import React, { Component } from 'react';\n\nimport { Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\n\nimport ControlBar from './topcontrolbar'\nimport Gallery from './gallery'\nimport BottomControlBar from './bottomcontrolbar'\n\n\nclass App extends Component {\n    render() {\n        return (\n            <Container fluid>\n                <ControlBar id=\"top-bar\" />\n                <Gallery />\n                <BottomControlBar />\n            </Container>\n        );\n    }\n}\n\nexport default App;\n","import React, { Component } from 'react'\r\nimport { Provider } from 'react-redux'\r\n\r\nimport thunkMiddleware from 'redux-thunk'\r\n// import { createLogger } from 'redux-logger'\r\nimport { createStore, applyMiddleware } from 'redux'\r\nimport rootReducer from '../reducers'\r\n\r\nimport App from './App'\r\n\r\n// const loggerMiddleware = createLogger()\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  applyMiddleware(\r\n    thunkMiddleware, // lets us dispatch() functions\r\n    // loggerMiddleware // neat middleware that logs actions\r\n  )\r\n)\r\n\r\nexport default class Root extends Component {\r\n  render() {\r\n    return (\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\nimport { render } from 'react-dom'\nimport Root from './containers/Root'\n\nrender(\n  <Root />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}